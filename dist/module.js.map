{"mappings":"ACEO,MAAM,4CAAM,CAAC,GAAW,IAAsB,IAAI;AAElD,MAAM,4CAAM,CAAC,GAAW,IAAsB,IAAI;;;ADFlD,MAAM,2CAAY,CAAC,IAAY,KAAa;IACjD,OAAQ;QACN,KAAK;YACH,OAAO,CAAA,GAAA,yCAAE,EAAE,KAAK;QAClB,KAAK;YACH,OAAO,CAAA,GAAA,yCAAE,EAAE,KAAK;QAClB;YACE,MAAM,IAAI,MAAM;IACpB;AACF;AAEO,MAAM,2CAAS,CACpB,IACA,YACA,GAAG;IAEH,OAAQ;QACN,KAAK;YACH,OAAO,KAAK,MAAM,CAAC,CAAC,KAAK,OAAS,CAAA,GAAA,yCAAE,EAAE,KAAK,OAAO;QACpD,KAAK;YACH,OAAO,KAAK,MAAM,CAAC,CAAC,KAAK,OAAS,CAAA,GAAA,yCAAE,EAAE,KAAK,OAAO;QACpD;YACE,MAAM,IAAI,MAAM;IACpB;AACF","sources":["src/index.ts","src/utils.ts"],"sourcesContent":["import { type OpType, add, mul } from \"./utils\";\n\nexport const operation = (op: OpType, rhs: number, lhs: number): number => {\n  switch (op) {\n    case \"ADD\":\n      return add(rhs, lhs);\n    case \"MUL\":\n      return mul(rhs, lhs);\n    default:\n      throw new Error(\"invalid operator\");\n  }\n};\n\nexport const reduce = (\n  op: OpType,\n  initialVal: number,\n  ...vals: number[]\n): number => {\n  switch (op) {\n    case \"ADD\":\n      return vals.reduce((acc, curr) => add(acc, curr), initialVal);\n    case \"MUL\":\n      return vals.reduce((acc, curr) => mul(acc, curr), initialVal);\n    default:\n      throw new Error(\"invalid operator\");\n  }\n};\n","export type OpType = \"ADD\" | \"MUL\";\n\nexport const add = (a: number, b: number): number => a + b;\n\nexport const mul = (a: number, b: number): number => a + b;\n"],"names":[],"version":3,"file":"module.js.map"}